d
}
else{
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2])
d
}
})
output$AppNum <- renderTable({
s = data_count()%>%
group_by(EMPLOYER_NAME) %>%
dplyr::summarise(Apps = sum(cer_COUNT)+sum(non_COUNT),
Cer_apps = sum(cer_COUNT))
s = s[order(s$Apps, decreasing = TRUE),]
colnames(s) = c("Company","No. of Applications", "No. of Certified Apps.")
head(subset(s, Company!='OTHER'), 10)
})
output$Trend <- renderPlot({
s = data_count()%>%
group_by(YEAR) %>%
dplyr::summarise(non_apps = sum(non_COUNT),
Cer_apps = sum(cer_COUNT))
barplot(height=as.matrix(t(s[,c('Cer_apps','non_apps')])), las=1)
})
output$dfrend <- renderPlot({
#total = as.data.frame(table(data()$YEAR))
#certified = as.data.frame(table(subset(data(), CASE_STATUS == 'CERTIFIED')$YEAR))
#height <- rbind(total$Freq, certified$Freq)
#mp <- barplot(height, beside = TRUE,names.arg = total$Var1)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
#library(shiny)
#library(dplyr)
#h1b_count = read.csv("~/Desktop/h1b/h1b_count.csv", row.names = 1)
#h1b_map = read.csv("~/Desktop/h1b/h1b_count.csv", row.names = 1)
states = as.character(unique(h1b_count$STATE)[order(unique(h1b_count$STATE))])
jobs = as.character(unique(h1b_count$JOB_TITLE))
ui <- fluidPage(
titlePanel("H1B Statistics"),
fluidRow(
column(4, "",
sliderInput(inputId = "year",
label = "Year Range", sep='',
min = 2011, round=TRUE, ticks = FALSE,
max = 2016, dragRange=TRUE,
value = c(2011, 2016)
),
selectInput(inputId = "state",
label = "State",
choices = c('ALL', states)
),
selectInput(inputId = "job",
label = "Job Title",
choices = c('ALL', jobs)
)
),
column(8, "",
tableOutput("map")
)
),
fluidRow(
column(6, h6("No. of App. by Company"), tableOutput("AppNum")),
column(6, h6("Trend by Year"), plotOutput("Trend"))
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
data_count<-reactive({
if (input$state!='ALL' & input$job!='ALL'){
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2] & STATE == input$state & JOB_TITLE == input$job)
d
}
else if(input$state=='ALL' & input$job!='ALL'){
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2] & JOB_TITLE == input$job)
d
}
else if (input$state!='ALL' & input$job=='ALL'){
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2] & STATE == input$state)
d
}
else{
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2])
d
}
})
output$AppNum <- renderTable({
s = data_count()%>%
group_by(EMPLOYER_NAME) %>%
dplyr::summarise(Apps = sum(cer_COUNT)+sum(non_COUNT),
Cer_apps = sum(cer_COUNT))
s = s[order(s$Apps, decreasing = TRUE),]
colnames(s) = c("Company","No. of Applications", "No. of Certified Apps.")
head(subset(s, Company!='OTHER'), 10)
})
output$Trend <- renderPlot({
s = data_count()%>%
group_by(YEAR) %>%
dplyr::summarise(apps = sum(non_COUNT) + sum(cer_COUNT))
barplot(height=s$apps, las=1)
})
output$dfrend <- renderPlot({
#total = as.data.frame(table(data()$YEAR))
#certified = as.data.frame(table(subset(data(), CASE_STATUS == 'CERTIFIED')$YEAR))
#height <- rbind(total$Freq, certified$Freq)
#mp <- barplot(height, beside = TRUE,names.arg = total$Var1)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
#library(shiny)
#library(dplyr)
#h1b_count = read.csv("~/Desktop/h1b/h1b_count.csv", row.names = 1)
#h1b_map = read.csv("~/Desktop/h1b/h1b_count.csv", row.names = 1)
states = as.character(unique(h1b_count$STATE)[order(unique(h1b_count$STATE))])
jobs = as.character(unique(h1b_count$JOB_TITLE))
ui <- fluidPage(
titlePanel("H1B Statistics"),
fluidRow(
column(4, "",
sliderInput(inputId = "year",
label = "Year Range", sep='',
min = 2011, round=TRUE, ticks = FALSE,
max = 2016, dragRange=TRUE,
value = c(2011, 2016)
),
selectInput(inputId = "state",
label = "State",
choices = c('ALL', states)
),
selectInput(inputId = "job",
label = "Job Title",
choices = c('ALL', jobs)
)
),
column(8, "",
tableOutput("map")
)
),
fluidRow(
column(6, tableOutput("AppNum")),
column(6, plotOutput("Trend"))
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
data_count<-reactive({
if (input$state!='ALL' & input$job!='ALL'){
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2] & STATE == input$state & JOB_TITLE == input$job)
d
}
else if(input$state=='ALL' & input$job!='ALL'){
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2] & JOB_TITLE == input$job)
d
}
else if (input$state!='ALL' & input$job=='ALL'){
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2] & STATE == input$state)
d
}
else{
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2])
d
}
})
output$AppNum <- renderTable({
s = data_count()%>%
group_by(EMPLOYER_NAME) %>%
dplyr::summarise(Apps = sum(cer_COUNT)+sum(non_COUNT),
Cer_apps = sum(cer_COUNT))
s = s[order(s$Apps, decreasing = TRUE),]
colnames(s) = c("Company","No. of Applications", "No. of Certified Apps.")
head(subset(s, Company!='OTHER'), 10)
})
output$Trend <- renderPlot({
s = data_count()%>%
group_by(YEAR) %>%
dplyr::summarise(apps = sum(non_COUNT) + sum(cer_COUNT))
barplot(height=s$apps, las=1)
})
output$dfrend <- renderPlot({
#total = as.data.frame(table(data()$YEAR))
#certified = as.data.frame(table(subset(data(), CASE_STATUS == 'CERTIFIED')$YEAR))
#height <- rbind(total$Freq, certified$Freq)
#mp <- barplot(height, beside = TRUE,names.arg = total$Var1)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
#library(shiny)
#library(dplyr)
#h1b_count = read.csv("~/Desktop/h1b/h1b_count.csv", row.names = 1)
#h1b_map = read.csv("~/Desktop/h1b/h1b_count.csv", row.names = 1)
states = as.character(unique(h1b_count$STATE)[order(unique(h1b_count$STATE))])
jobs = as.character(unique(h1b_count$JOB_TITLE))
ui <- fluidPage(
titlePanel("H1B Statistics"),
fluidRow(
column(4, "",
sliderInput(inputId = "year",
label = "Year Range", sep='',
min = 2011, round=TRUE, ticks = FALSE,
max = 2016, dragRange=TRUE,
value = c(2011, 2016)
),
selectInput(inputId = "state",
label = "State",
choices = c('ALL', states)
),
selectInput(inputId = "job",
label = "Job Title",
choices = c('ALL', jobs)
)
),
column(8, "",
tableOutput("map")
)
),
fluidRow(
column(6, tableOutput("AppNum")),
column(6, plotOutput("Trend"))
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
data_count<-reactive({
if (input$state!='ALL' & input$job!='ALL'){
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2] & STATE == input$state & JOB_TITLE == input$job)
d
}
else if(input$state=='ALL' & input$job!='ALL'){
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2] & JOB_TITLE == input$job)
d
}
else if (input$state!='ALL' & input$job=='ALL'){
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2] & STATE == input$state)
d
}
else{
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2])
d
}
})
output$AppNum <- renderTable({
s = data_count()%>%
group_by(EMPLOYER_NAME) %>%
dplyr::summarise(Apps = sum(cer_COUNT)+sum(non_COUNT),
Cer_apps = sum(cer_COUNT))
s = s[order(s$Apps, decreasing = TRUE),]
colnames(s) = c("Company","No. of Applications", "No. of Certified Apps.")
head(subset(s, Company!='OTHER'), 10)
})
output$Trend <- renderPlot({
s = data_count()%>%
group_by(YEAR) %>%
dplyr::summarise(apps = sum(non_COUNT) + sum(cer_COUNT))
barplot(height=s$apps, las=1, main = 'No. Applications by Year')
})
output$dfrend <- renderPlot({
#total = as.data.frame(table(data()$YEAR))
#certified = as.data.frame(table(subset(data(), CASE_STATUS == 'CERTIFIED')$YEAR))
#height <- rbind(total$Freq, certified$Freq)
#mp <- barplot(height, beside = TRUE,names.arg = total$Var1)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
View(h1b_map)
h1b_map = read.csv("~/Desktop/h1b/h1b_count.csv", row.names = 1)
h1b_map = read.csv("~/Desktop/h1b/h1b_map.csv", row.names = 1)
data_map<-reactive({
if (input$state!='ALL' & input$job!='ALL'){
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2] & STATE == input$state & JOB_TITLE == input$job)
d
}
else if(input$state=='ALL' & input$job!='ALL'){
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2] & JOB_TITLE == input$job)
d
}
else if (input$state!='ALL' & input$job=='ALL'){
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2] & STATE == input$state)
d
}
else{
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2])
d
}
})
?group_by
names(h1b_map)
class(names(h1b_map))}
class(names(h1b_map))
s = data_count()%>%
group_by(c('lon', 'lat')) %>%
dplyr::summarise(apps = sum(non_COUNT) + sum(cer_COUNT))
#library(shiny)
#library(dplyr)
#h1b_count = read.csv("~/Desktop/h1b/h1b_count.csv", row.names = 1)
#h1b_map = read.csv("~/Desktop/h1b/h1b_map.csv", row.names = 1)
states = as.character(unique(h1b_count$STATE)[order(unique(h1b_count$STATE))])
jobs = as.character(unique(h1b_count$JOB_TITLE))
ui <- fluidPage(
titlePanel("H1B Statistics"),
fluidRow(
column(4, "",
sliderInput(inputId = "year",
label = "Year Range", sep='',
min = 2011, round=TRUE, ticks = FALSE,
max = 2016, dragRange=TRUE,
value = c(2011, 2016)
),
selectInput(inputId = "state",
label = "State",
choices = c('ALL', states)
),
selectInput(inputId = "job",
label = "Job Title",
choices = c('ALL', jobs)
)
),
column(8, "",
plotOutput("map")
)
),
fluidRow(
column(6, tableOutput("AppNum")),
column(6, plotOutput("Trend"))
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
data_count<-reactive({
if (input$state!='ALL' & input$job!='ALL'){
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2] & STATE == input$state & JOB_TITLE == input$job)
d
}
else if(input$state=='ALL' & input$job!='ALL'){
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2] & JOB_TITLE == input$job)
d
}
else if (input$state!='ALL' & input$job=='ALL'){
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2] & STATE == input$state)
d
}
else{
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2])
d
}
})
data_map<-reactive({
if (input$state!='ALL' & input$job!='ALL'){
d = subset(h1b_map, YEAR>=input$year[1] & YEAR<=input$year[2] & STATE == input$state & JOB_TITLE == input$job)
d
}
else if(input$state=='ALL' & input$job!='ALL'){
d = subset(h1b_map, YEAR>=input$year[1] & YEAR<=input$year[2] & JOB_TITLE == input$job)
d
}
else if (input$state!='ALL' & input$job=='ALL'){
d = subset(h1b_map, YEAR>=input$year[1] & YEAR<=input$year[2] & STATE == input$state)
d
}
else{
d = subset(h1b_map, YEAR>=input$year[1] & YEAR<=input$year[2])
d
}
})
output$AppNum <- renderTable({
s = data_count()%>%
group_by(EMPLOYER_NAME) %>%
dplyr::summarise(Apps = sum(cer_COUNT)+sum(non_COUNT),
Cer_apps = sum(cer_COUNT))
s = s[order(s$Apps, decreasing = TRUE),]
colnames(s) = c("Company","No. of Applications", "No. of Certified Apps.")
head(subset(s, Company!='OTHER'), 10)
})
output$Trend <- renderPlot({
s = data_count()%>%
group_by(YEAR) %>%
dplyr::summarise(apps = sum(non_COUNT) + sum(cer_COUNT))
barplot(height=s$apps, las=1, main = 'No. Applications by Year')
})
output$dfrend <- renderPlot({
s = data_map()%>%
group_by(c('lon', 'lat')) %>%
dplyr::summarise(apps = sum(non_COUNT) + sum(cer_COUNT))
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
#library(shiny)
#library(dplyr)
#h1b_count = read.csv("~/Desktop/h1b/h1b_count.csv", row.names = 1)
#h1b_map = read.csv("~/Desktop/h1b/h1b_map.csv", row.names = 1)
states = as.character(unique(h1b_count$STATE)[order(unique(h1b_count$STATE))])
jobs = as.character(unique(h1b_count$JOB_TITLE))
ui <- fluidPage(
titlePanel("H1B Statistics"),
fluidRow(
column(4, "",
sliderInput(inputId = "year",
label = "Year Range", sep='',
min = 2011, round=TRUE, ticks = FALSE,
max = 2016, dragRange=TRUE,
value = c(2011, 2016)
),
selectInput(inputId = "state",
label = "State",
choices = c('ALL', states)
),
selectInput(inputId = "job",
label = "Job Title",
choices = c('ALL', jobs)
)
),
column(8, "",
plotOutput("map")
)
),
fluidRow(
column(6, tableOutput("AppNum")),
column(6, plotOutput("Trend"))
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
data_count<-reactive({
if (input$state!='ALL' & input$job!='ALL'){
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2] & STATE == input$state & JOB_TITLE == input$job)
d
}
else if(input$state=='ALL' & input$job!='ALL'){
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2] & JOB_TITLE == input$job)
d
}
else if (input$state!='ALL' & input$job=='ALL'){
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2] & STATE == input$state)
d
}
else{
d = subset(h1b_count, YEAR>=input$year[1] & YEAR<=input$year[2])
d
}
})
data_map<-reactive({
if (input$state!='ALL' & input$job!='ALL'){
d = subset(h1b_map, YEAR>=input$year[1] & YEAR<=input$year[2] & STATE == input$state & JOB_TITLE == input$job)
d
}
else if(input$state=='ALL' & input$job!='ALL'){
d = subset(h1b_map, YEAR>=input$year[1] & YEAR<=input$year[2] & JOB_TITLE == input$job)
d
}
else if (input$state!='ALL' & input$job=='ALL'){
d = subset(h1b_map, YEAR>=input$year[1] & YEAR<=input$year[2] & STATE == input$state)
d
}
else{
d = subset(h1b_map, YEAR>=input$year[1] & YEAR<=input$year[2])
d
}
})
output$AppNum <- renderTable({
s = data_count()%>%
group_by(EMPLOYER_NAME) %>%
dplyr::summarise(Apps = sum(cer_COUNT)+sum(non_COUNT),
Cer_apps = sum(cer_COUNT))
s = s[order(s$Apps, decreasing = TRUE),]
colnames(s) = c("Company","No. of Applications", "No. of Certified Apps.")
head(subset(s, Company!='OTHER'), 10)
})
output$Trend <- renderPlot({
s = data_count()%>%
group_by(YEAR) %>%
dplyr::summarise(apps = sum(non_COUNT) + sum(cer_COUNT))
barplot(height=s$apps, las=1, main = 'No. Applications by Year')
})
output$dfrend <- renderPlot({
s = data_map()%>%
group_by(c('lon', 'lat')) %>%
dplyr::summarise(num = sum(count),
salary=mean(median)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
map()
runApp()
library(rsconnect)
runApp()
library(shiny)
runApp()
setwd("~/Desktop/h1b_stat")
runApp()
runApp()
deployApp()
rm(list=ls())
runApp()
h1b_count = read.csv("data/h1b_count.csv", row.names = 1)
jobs = as.character(unique(h1b_count$JOB_TITLE))
jobs
rm(list=ls())
runApp()
deployApp()
runApp()
runApp()
deployApp()
runApp()
runApp()
deployApp()
runApp()
runApp()
deployApp()
